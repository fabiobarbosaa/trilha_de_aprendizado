<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1268.v6eb_e2ee1a_85a">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3618.v13db_a_21f0fcf">
    <script>pipeline {
    agent any

    stages{
        stage(&apos;Git Checkout&apos;){
            steps{
                script{
                    git branch: &apos;main&apos;, url: &apos;https://github.com/alura/techguide.git&apos;
                }
            }
        }
        stage(&apos;Build Image&apos;){
            steps{ 
                script{
                    dockerapp = docker.build(&quot;fabiobarbosaa/ci_cd:0.1.${env.BUILD_ID}-dev&quot;, &apos;-f ./src/Dockerfile ./src&apos;)
                }
            }
        /* }
        stage(&apos;Http Request&apos;) {
            steps {
                script{
                    def response = httpRequest responseHandle: &apos;STRING&apos;,
                           url: &apos;http://localhost:8080/&apos;,
                           validResponseCodes: &apos;200&apos;
                }
            }
        }
        stage(&apos;Push Image&apos;){
            steps{ 
                script{
                    docker.withRegistry(&apos;https://registry.hub.docker.com&apos;, &apos;dockerhub&apos;){
                        dockerapp.push(&quot;0.1.${env.BUILD_ID}-dev&quot;)
                        dockerapp.push(&apos;latest&apos;)
                    }
                }
            }*/
        } 
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>